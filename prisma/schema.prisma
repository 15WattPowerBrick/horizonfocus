datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User and auth models
model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  memberships   Membership[]
  clients       Client[]        @relation("ClientCreatedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

/**
 * ===================== üè¢ Organisation Models =====================
 */

model Organisation {
  id       String         @id @default(cuid())
  name     String         @unique
  parentId String? // For hierarchical orgs
  parent   Organisation?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: SetNull)
  children Organisation[] @relation("ParentChild")

  memberships Membership[]
  clients     Client[]
  roles       Role[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

/**
 * ===================== üë• User Management =====================
 */

model Membership {
  id             String @id @default(cuid())
  userId         String
  organisationId String
  roleId         String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, organisationId])
}

model Role {
  id              String           @id @default(cuid())
  name            String
  organisationId  String
  organisation    Organisation     @relation(fields: [organisationId], references: [id])
  memberships     Membership[]
  rolePermissions RolePermission[]

  @@unique([organisationId, name])
}

model Permission {
  id   String @id @default(cuid())
  name String @unique

  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

/**
 * ===================== üè¢ CRM Models =====================
 */

model Client {
  id             String    @id @default(cuid())
  name           String
  email          String?   @unique
  phone          String?
  organisationId String
  createdById    String
  deletedAt      DateTime?

  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Restrict)
  createdBy    User         @relation("ClientCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email]) // Faster lookups
}
