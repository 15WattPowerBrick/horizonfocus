// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  firstName           String
  lastName           String
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  memberships    Membership[]
}

model Organisation {
  id          String          @id @default(cuid())
  name        String          @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  memberships Membership[]
  clients     Client[]
  projects    Project[]
  invoices    Invoice[]
}

model Membership {
  id             String       @id @default(cuid())
  userId         String
  organisationId String
  roleId         String

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  role           Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, organisationId])
}

model Role {
  id          String           @id @default(cuid())
  name        String
  permissions RolePermission[]
  memberships Membership[]
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  roles       RolePermission[]
}

model RolePermission {
  id          String      @id @default(cuid())
  roleId      String
  permissionId String

  role        Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission  Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Client {
  id             String          @id @default(cuid())
  name           String
  email          String?
  phone          String?
  organisationId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  organisation   Organisation    @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  projects       Project[]
}

model Project {
  id             String          @id @default(cuid())
  name           String
  description    String?
  organisationId String
  clientId       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  organisation   Organisation    @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  client         Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoices       Invoice[]
}

model Invoice {
  id             String          @id @default(cuid())
  number         String          @unique
  totalAmount    Float
  discount       Float?
  tax            Float?
  organisationId String
  projectId      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  organisation   Organisation    @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  project        Project?        @relation(fields: [projectId], references: [id], onDelete: SetNull)
  products       Product[]
}

model Product {
  id        String  @id @default(cuid())
  name      String
  price     Float
  quantity  Int
  invoiceId String

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
